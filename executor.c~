/*Jack Maloy, 116329200, jmaloy*/
#include <stdio.h>
#include <string.h> 
#include <sysexits.h>   
#include <stdlib.h>  
#include <sys/wait.h> 
#include <unistd.h> 
#include <sys/types.h> 
#include <err.h>
#include <fcntl.h>
#include "command.h"
#include "executor.h"
/*
static void print_tree(struct tree *t);
*/
static int execute_aux(struct tree *t, int p_input_fd, int p_output_fd);

int execute(struct tree *t) {
  if(t != NULL){
    return execute_aux(t, STDIN_FILENO, STDOUT_FILENO);
  }
  return 0;
}

static int execute_aux(struct tree *t, int p_input_fd, int p_output_fd){
  pid_t pid, child_pid_one, child_pid_two;
  int status, left_res, pipe_fd[2];
  if(t->conjunction == NONE){
    
    if(strcmp(t->argv[0], "exit")==0){
      exit(0);
    }else if(strcmp(t->argv[0], "cd")==0){
      chdir(t->argv[1]);
    }else{/*if not exit or cd*/
      pid = fork();
      if(pid==-1){
	err(EX_OSERR, "Fork Failed.\n");
      }else{
	if(pid){/*parent*/
	  wait(&status);
	  return status;
	}else{/*child*/
	  /*check and handle I/O redirection. Referenced from dup2_ex1.c*/
	  
	  /*input*/
	  if(t->input != NULL){
	    if((p_input_fd = open(t->input, O_RDONLY)) < 0){
	      err(EX_OSERR, "File opening failed.\n");
	    }
	    if(dup2(p_input_fd, STDIN_FILENO)<0){
	      err(EX_OSERR, "dup2 error.\n");
	    }
	    if(close(p_input_fd)<0){
	      err(EX_OSERR, "close error.\n");
	    }
	  }
	  
	  /*output*/
	  if(t->output!=NULL){
	    if((p_output_fd = open(t->output, 
				   O_WRONLY | O_CREAT | O_TRUNC, 0664)) < 0){
	      err(EX_OSERR, "File opening failed.\n");
	    }
	    if(dup2(p_output_fd, STDOUT_FILENO)<0){
	      err(EX_OSERR, "dup2 error.\n");
	    }
	    if(close(p_output_fd)<0){
	      err(EX_OSERR, "close error.\n");
	    }
	  }
	  
	  execvp(t->argv[0], t->argv);
	  fprintf(stderr, "Failed to execute %s\n", t->argv[0]);    
	  exit(-1);
	}/*end of child*/
      }
    }
  }/*End of NONE*/
  
  /*AND*/
  if(t->conjunction == AND){
    
    if(t->input != NULL){
      if((p_input_fd = open(t->input, O_RDONLY)) < 0){
	err(EX_OSERR, "File opening failed.\n");
      }
    }
    
    if(t->output!=NULL){
      if((p_output_fd = open(t->output, 
			     O_WRONLY | O_CREAT | O_TRUNC, 0664)) < 0){
	err(EX_OSERR, "File opening failed.\n");
      }
    }
    
    left_res = execute_aux(t->left, p_input_fd, p_output_fd);
    if(left_res==0){
      execute_aux(t->right, p_input_fd, p_output_fd);
    }
  }/*end of AND*/
  
  /*PIPE*/
  if(t->conjunction == PIPE){ 
    
    if(t->left->output){
      printf("Ambiguous output redirect.\n");
    }else{
      
      if(t->right->input){
	printf("Ambiguous input redirect.\n");
      }else{/*we can pipe*/
	
	/*redirect I/O if input and output are provided*/
	if(t->input != NULL){
	  if((p_input_fd = open(t->input, O_RDONLY)) < 0){
	    err(EX_OSERR, "File opening failed.\n");
	  }
	}
	if(t->output!=NULL){
	  if((p_output_fd = open(t->output, 
				 O_WRONLY | O_CREAT | O_TRUNC, 0664)) < 0){
	    err(EX_OSERR, "File opening failed.\n");
	  }
	}
	
	pipe(pipe_fd); /*making a pipe*/
	child_pid_one = fork();
	
	if(child_pid_one==0){
	  close(pipe_fd[0]); /*don't need read end*/
	  
	  /*Redirecting stdout to write end*/
	  if(dup2(pipe_fd[1], STDOUT_FILENO)<0){
	    err(EX_OSERR, "error redirecting write end");
	  }
	  execute_aux(t->left, p_input_fd, pipe_fd[1]);
	  close(pipe_fd[1]);
	  exit(0);
	}else{
	  child_pid_two = fork(); /*second child*/
	  
	  if(child_pid_two==0){/*if second child*/
	    close(pipe_fd[1]);
	    
	    /*Redirecting stdout to write end*/
	    if(dup2(pipe_fd[0], STDIN_FILENO)<0){
	      err(EX_OSERR, "error redirecting write end");
	    }
	    execute_aux(t->right, p_input_fd, pipe_fd[0]);
	    close(pipe_fd[0]);
	    exit(0);
	  }else{
	    /*Parent doesn't use pipes, and reaps both children*/
	    close(pipe_fd[0]);
	    close(pipe_fd[1]);
	    
	    wait(NULL);
	    wait(NULL);
	  }
	}
      }
    }
  }/*End of PIPE*/
  
  /*SUBSHELL*/
  if(t->conjunction == SUBSHELL){
    /*redirect I/O if input and output are provided*/
    if(t->input != NULL){
      if((p_input_fd = open(t->input, O_RDONLY)) < 0){
	err(EX_OSERR, "File opening failed.\n");
      }
    }
    if(t->output!=NULL){
      if((p_output_fd = open(t->output, 
			     O_WRONLY | O_CREAT | O_TRUNC, 0664)) < 0){
	err(EX_OSERR, "File opening failed.\n");
      }
    }

    pid = fork();
    if(pid == -1){
      err(EX_OSERR, "Fork Failed.\n");
    }else{
      if(pid != 0){/*parent*/
	wait(NULL);
      }
      if(pid == 0){/*child*/
	execute_aux(t->left, p_input_fd, p_output_fd);
	exit(0);
      }
    }
  }/*end of SUBSHELL*/
  return 0;
}/*End of Function*/


/*
static void print_tree(struct tree *t) {
   if (t != NULL) {
      print_tree(t->left);

      if (t->conjunction == NONE) {
         printf("NONE: %s, ", t->argv[0]);
      } else {
         printf("%s, ", conj[t->conjunction]);
      }
      printf("IR: %s, ", t->input);
      printf("OR: %s\n", t->output);

      print_tree(t->right);
   }
}
*/
